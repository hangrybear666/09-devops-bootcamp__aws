#!/user/bin/env groovy

library identifier: '09-devops-bootcamp__aws@main', retriever: modernSCM(
    scm: [$class: 'GitSCMSource', 
    credentialsId: 'git-creds', 
    remote: 'https://github.com/hangrybear666/09-devops-bootcamp__aws.git', 
    traits: [gitBranchDiscovery()]], 
    libraryPath: 'jenkins-shared-library/')
def groovyScript

pipeline {
    agent any
    tools {
        maven 'Maven'
    }

    parameters {
        // string(name: 'PERSON', defaultValue: 'Mr Jenkins', description: 'Who should I say hello to?')
        // text(name: 'DOCKER_HUB_REPO_URL', defaultValue: 'hangrybear/devops_bootcamp', description: 'Enter your own docker hub repository')
        // booleanParam(name: 'TOGGLE', defaultValue: true, description: 'Toggle this value')
        choice(name: 'DEPLOYMENT_STRATEGY', choices: ['docker run (java-app only)', 'docker compose (/w postgres)'], description: 'Pick a deployment strategy for EC2')
        // password(name: 'PASSWORD', defaultValue: 'SECRET', description: 'Enter a password')
    }
    stages {
        stage('Init') {
            steps {
                script {
                    // abstracts away groovy logic into single function calls
                    groovyScript = load "java-app/script.groovy"
                }
            }
        }

        stage('Setup Environment') {
            steps {
                script {
                    // read config/remote.properties and expose values as global env vars
                    def props = readProperties file: 'config/remote.properties'
                    env.EC2_USER = props["EC2_USER_1"]
                    env.EC2_PUBLIC_IP = props["EC2_PUBLIC_IP_1"]
                    env.DOCKER_HUB_REPO_URL = props["DOCKER_HUB_REPO"]

                    env.DEPLOYABLE_NAME='java-app'
                    env.EC2_USER='ec2-user'
                }
            }
        }

        stage('Increment version') {
            steps {
                dir("java-app") {
                    script {
                        // using jenkins shared library groovy scripts in /jenkins-shared-library/vars
                        incrementMavenVersion()
                    }
                }
            }
        }
        stage('Build artifact') {
            steps {
                dir("java-app") {
                    script {
                        // using jenkins shared library groovy scripts in /jenkins-shared-library/vars
                        buildJar()
                    }
                }
            }
        }
        stage('Build image') {
            steps {
                dir("java-app") {
                    script {
                        withCredentials([usernamePassword(credentialsId: 'docker-hub-repo', passwordVariable: 'PASS', usernameVariable: 'USER')]){
                            // using jenkins shared library groovy scripts extended themselves by a groovy Docker class in /jenkins-shared-library
                            buildImage(env.DEPLOYABLE_NAME)
                            dockerLogin()
                            dockerPush(env.DEPLOYABLE_NAME)
                        }
                    }
                }
            }
        }

        stage('Deploy docker compose to EC2') {
            when {
                expression {
                    return DEPLOYMENT_STRATEGY == 'docker compose (/w postgres)';
                }
            }
            steps {
                dir("java-app") {
                    script {
                        // make secrets and credentials available as environment variables
                        withCredentials([usernamePassword(credentialsId: 'docker-hub-creds', passwordVariable: 'DOCKER_HUB_TOKEN', usernameVariable: 'DOCKER_HUB_USER'),
                                         string(credentialsId: 'postgres-pw', variable: 'POSTGRES_PASSWORD')]) {
                            // expose Environment Variable to shell script
                            withEnv(["DOCKER_IMG_TAG=${DOCKER_HUB_REPO_URL}:${DEPLOYABLE_NAME}-${VERSION_NUM}"
                            ]) {
                                // enables the private key saved as credential to be used for ssh connection to ec2 instance
                                sshagent(['ec2-server-key']) {
                                    // copies docker-compose via scp, sets correct env vars on ec2 machine and starts the containers
                                    sh "bash ./ec2-deployment-payload.sh"
                                }
                            }
                        }
                    }

                }
            }
        }
        stage("Deploy docker image to EC2") {
            when {
                expression {
                    return DEPLOYMENT_STRATEGY == 'docker run (java-app only)';
                }
            }
            steps {
                script {
                    echo 'deploying docker image to EC2...'
                    def dockerCmd = "docker run -p 8080:8080 -d ${DOCKER_HUB_REPO_URL}:${DEPLOYABLE_NAME}-${VERSION_NUM}"
                    sshagent(['ec2-server-key']) {
                        sh "ssh -o StrictHostKeyChecking=no ${EC2_USER}@${EC2_PUBLIC_IP} ${dockerCmd}"
                    }
                }
            }               
        }
        stage('Commit version update'){
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'git-creds', passwordVariable: 'PASS', usernameVariable: 'USER')]){
                        // pushes a new version saved in pom.xml to github repo
                        groovyScript.commitVersionUpdate()
                    }
                }
            }
        }
    }
}

